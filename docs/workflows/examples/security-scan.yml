# Security Scanning Workflow for Holo-Code-Gen
# Place this file in .github/workflows/security-scan.yml

name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - container
          - secrets

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Job 1: Code Security Analysis
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ inputs.scan_type == 'full' || inputs.scan_type == 'code' || github.event_name != 'workflow_dispatch' }}
    
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep
      
      - name: Run Bandit security linter
        run: |
          bandit -r holo_code_gen/ \
            -f sarif \
            -o bandit-results.sarif \
            --severity-level medium \
            --skip B101  # Skip assert checks in non-production code
        continue-on-error: true
      
      - name: Upload Bandit results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.sarif
          category: bandit
      
      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/owasp-top-ten
          generateSarif: "1"
      
      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep
      
      - name: Check for hardcoded secrets
        run: |
          # Custom secret detection for photonic-specific sensitive data
          echo "Checking for hardcoded secrets and sensitive data..."
          
          # Check for API keys, tokens, passwords
          if grep -r -E "(api[_-]?key|token|password|secret)" --include="*.py" holo_code_gen/ | grep -v "test"; then
            echo "⚠️ Potential secrets found in code"
            grep -r -E "(api[_-]?key|token|password|secret)" --include="*.py" holo_code_gen/ | grep -v "test"
          fi
          
          # Check for PDK-specific sensitive information
          if grep -r -E "(pdk[_-]?path|foundry[_-]?key|license[_-]?server)" --include="*.py" holo_code_gen/; then
            echo "⚠️ Potential PDK-related sensitive data found"
          fi
      
      - name: Security scan summary
        run: |
          echo "## Code Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Bandit static analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Semgrep security rules applied" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secret detection performed" >> $GITHUB_STEP_SUMMARY

  # Job 2: Dependency Security Analysis
  dependency-security:
    name: Dependency Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ inputs.scan_type == 'full' || inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          pip install -e .
      
      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
          safety check --short-report
        continue-on-error: true
      
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit --format=cyclonedx --output=sbom.json
        continue-on-error: true
      
      - name: Check for known vulnerabilities
        run: |
          echo "## Dependency Security Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -f safety-report.json ]; then
            VULNS=$(jq length safety-report.json)
            echo "- Safety vulnerabilities found: $VULNS" >> $GITHUB_STEP_SUMMARY
            
            if [ "$VULNS" -gt 0 ]; then
              echo "### Critical Vulnerabilities" >> $GITHUB_STEP_SUMMARY
              jq -r '.[] | "- \(.advisory) in \(.package_name) \(.analyzed_version)"' safety-report.json >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: Upload dependency reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-security-reports
          path: |
            safety-report.json
            pip-audit-report.json
            sbom.json
      
      - name: License compliance check
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=licenses.json
          
          # Check for copyleft licenses that might conflict
          COPYLEFT_LICENSES="GPL-2.0,GPL-3.0,AGPL-3.0,LGPL-2.1,LGPL-3.0"
          
          echo "Checking for potentially problematic licenses..."
          if pip-licenses | grep -E "$COPYLEFT_LICENSES"; then
            echo "⚠️ Found copyleft licenses that may require legal review"
          else
            echo "✅ No problematic licenses detected"
          fi

  # Job 3: Container Security Scanning
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ inputs.scan_type == 'full' || inputs.scan_type == 'container' || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build container for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runtime
          tags: holo-code-gen:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'holo-code-gen:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'
      
      - name: Run detailed Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'holo-code-gen:security-scan'
          format: 'json'
          output: 'trivy-detailed.json'
      
      - name: Analyze container security
        run: |
          echo "## Container Security Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Count vulnerabilities by severity
          CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-detailed.json)
          HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-detailed.json)
          MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-detailed.json)
          LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-detailed.json)
          
          echo "- Critical: $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- High: $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- Medium: $MEDIUM" >> $GITHUB_STEP_SUMMARY
          echo "- Low: $LOW" >> $GITHUB_STEP_SUMMARY
          
          # Fail if critical vulnerabilities found
          if [ "$CRITICAL" -gt 0 ]; then
            echo "❌ Critical vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
            echo "Critical vulnerabilities found in container image"
            exit 1
          fi
          
          echo "✅ No critical vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
      
      - name: Check container configuration
        run: |
          echo "Analyzing container configuration security..."
          
          # Check if running as non-root
          if docker run --rm holo-code-gen:security-scan whoami | grep -q "holo"; then
            echo "✅ Container runs as non-root user"
          else
            echo "⚠️ Container may be running as root"
          fi
          
          # Check for sensitive files
          echo "Checking for sensitive files in container..."
          docker run --rm holo-code-gen:security-scan find / -name "*.pem" -o -name "*.key" -o -name "*password*" 2>/dev/null || true
      
      - name: Upload container security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-reports
          path: |
            trivy-results.sarif
            trivy-detailed.json

  # Job 4: Infrastructure as Code Security
  iac-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ inputs.scan_type == 'full' || github.event_name == 'schedule' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Checkov on Dockerfile
        uses: bridgecrewio/checkov-action@master
        with:
          file: Dockerfile
          framework: dockerfile
          output_format: sarif
          output_file_path: checkov-dockerfile.sarif
        continue-on-error: true
      
      - name: Run Checkov on Docker Compose
        uses: bridgecrewio/checkov-action@master
        with:
          file: docker-compose.yml
          framework: docker_compose
          output_format: sarif
          output_file_path: checkov-compose.sarif
        continue-on-error: true
      
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-dockerfile.sarif
          category: checkov-dockerfile
      
      - name: Upload Compose Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-compose.sarif
          category: checkov-compose

  # Job 5: Secret Scanning
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ inputs.scan_type == 'full' || inputs.scan_type == 'secrets' || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
      
      - name: Run TruffleHog secret scanning
        run: |
          trufflehog git file://. --json > trufflehog-results.json
        continue-on-error: true
      
      - name: Analyze secret scan results
        run: |
          echo "## Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -f trufflehog-results.json ] && [ -s trufflehog-results.json ]; then
            SECRETS_COUNT=$(jq -s length trufflehog-results.json)
            echo "- Potential secrets found: $SECRETS_COUNT" >> $GITHUB_STEP_SUMMARY
            
            if [ "$SECRETS_COUNT" -gt 0 ]; then
              echo "⚠️ Potential secrets detected in repository"
              echo "Please review the findings and ensure no real secrets are committed"
              
              # Show summary without exposing actual secrets
              echo "### Secret Types Found:" >> $GITHUB_STEP_SUMMARY
              jq -r '.[].DetectorName' trufflehog-results.json | sort | uniq -c >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ No secrets detected" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload secret scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: secret-scan-results
          path: trufflehog-results.json

  # Job 6: Security Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [code-security, dependency-security, container-security, iac-security, secret-scanning]
    if: always()
    
    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports/
      
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" >> security-summary.md
          echo "" >> security-summary.md
          echo "Scan Date: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> security-summary.md
          echo "Commit: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Code Security
          if [ "${{ needs.code-security.result }}" = "success" ]; then
            echo "- ✅ Code Security: Passed" >> security-summary.md
          else
            echo "- ❌ Code Security: Failed" >> security-summary.md
          fi
          
          # Dependency Security
          if [ "${{ needs.dependency-security.result }}" = "success" ]; then
            echo "- ✅ Dependency Security: Passed" >> security-summary.md
          else
            echo "- ❌ Dependency Security: Failed" >> security-summary.md
          fi
          
          # Container Security
          if [ "${{ needs.container-security.result }}" = "success" ]; then
            echo "- ✅ Container Security: Passed" >> security-summary.md
          else
            echo "- ❌ Container Security: Failed" >> security-summary.md
          fi
          
          # IaC Security
          if [ "${{ needs.iac-security.result }}" = "success" ]; then
            echo "- ✅ Infrastructure Security: Passed" >> security-summary.md
          else
            echo "- ❌ Infrastructure Security: Failed" >> security-summary.md
          fi
          
          # Secret Scanning
          if [ "${{ needs.secret-scanning.result }}" = "success" ]; then
            echo "- ✅ Secret Scanning: Passed" >> security-summary.md
          else
            echo "- ❌ Secret Scanning: Failed" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review all failed checks and address high/critical issues" >> security-summary.md
          echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
          echo "3. Ensure no secrets are committed to the repository" >> security-summary.md
          echo "4. Follow security best practices for photonic design workflows" >> security-summary.md
          
          cat security-summary.md >> $GITHUB_STEP_SUMMARY
      
      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md
      
      - name: Check overall security status
        run: |
          FAILED_JOBS=0
          
          if [ "${{ needs.code-security.result }}" != "success" ]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          if [ "${{ needs.dependency-security.result }}" != "success" ]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          if [ "${{ needs.container-security.result }}" != "success" ]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          echo "Failed security jobs: $FAILED_JOBS"
          
          if [ "$FAILED_JOBS" -gt 0 ]; then
            echo "❌ Security scan failed. Please review and address the issues."
            exit 1
          else
            echo "✅ All security scans passed successfully!"
          fi