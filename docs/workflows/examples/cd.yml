# Continuous Deployment Workflow for Holo-Code-Gen
# Place this file in .github/workflows/cd.yml

name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Test (prerequisite)
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install build twine
      
      - name: Extract version
        id: version
        run: |
          VERSION=$(python -c "import holo_code_gen; print(holo_code_gen.__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Run tests (if not forced)
        if: ${{ !inputs.force_deploy }}
        run: |
          pytest tests/ -x --tb=short
      
      - name: Build Python package
        run: |
          python -m build
          twine check dist/*
      
      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runtime
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  # Job 2: Security and Compliance Checks
  security:
    name: Security & Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'json'
          output: 'trivy-results.json'
      
      - name: Check for critical vulnerabilities
        run: |
          CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json)
          HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json)
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found. Deployment blocked."
            exit 1
          fi
          
          if [ "$HIGH" -gt 5 ]; then
            echo "⚠️ Too many high vulnerabilities found. Consider patching."
            # Don't fail for high vulnerabilities, but warn
          fi
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: trivy-results.json
      
      - name: SBOM generation
        uses: anchore/sbom-action@v0
        with:
          image: ${{ needs.build.outputs.image-tag }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Job 3: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build, security]
    environment: 
      name: staging
      url: https://staging.holo-code-gen.com
    if: github.ref == 'refs/heads/main' || inputs.environment == 'staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging environment
        run: |
          echo "Deploying version ${{ needs.build.outputs.version }} to staging"
          
          # Example deployment commands (customize for your infrastructure)
          # kubectl set image deployment/holo-code-gen holo-code-gen=${{ needs.build.outputs.image-tag }}
          # docker-compose -f docker-compose.staging.yml up -d
          
          echo "✅ Deployed to staging successfully"
      
      - name: Run smoke tests
        run: |
          sleep 30  # Wait for deployment to stabilize
          
          # Basic health check
          curl -f https://staging.holo-code-gen.com/health
          
          # Test compilation endpoint
          curl -X POST https://staging.holo-code-gen.com/api/v1/compile/test \
            -H "Content-Type: application/json" \
            -d '{"test": true}'
          
          echo "✅ Smoke tests passed"
      
      - name: Run integration tests
        run: |
          # Run integration tests against staging
          pytest tests/integration/ --url=https://staging.holo-code-gen.com
      
      - name: Performance validation
        run: |
          # Basic performance check
          python scripts/performance_check.py --env=staging
      
      - name: Notify staging deployment
        run: |
          echo "🚀 Successfully deployed to staging environment"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "URL: https://staging.holo-code-gen.com"

  # Job 4: Production Deployment Approval
  approve-production:
    name: Approve Production Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    environment:
      name: production-approval
    if: github.event_name == 'release' || inputs.environment == 'production'
    
    steps:
      - name: Manual approval required
        run: |
          echo "🔍 Production deployment requires manual approval"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Staging validation: ✅ Passed"
          echo "Security scan: ✅ Passed"

  # Job 5: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build, security, deploy-staging, approve-production]
    environment:
      name: production
      url: https://holo-code-gen.com
    if: github.event_name == 'release' || inputs.environment == 'production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download deployment artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/
      
      - name: Deploy to production
        run: |
          echo "🚀 Deploying version ${{ needs.build.outputs.version }} to production"
          
          # Blue-green deployment example
          # kubectl apply -f k8s/production/
          # kubectl set image deployment/holo-code-gen holo-code-gen=${{ needs.build.outputs.image-tag }}
          # kubectl rollout status deployment/holo-code-gen --timeout=300s
          
          echo "✅ Deployed to production successfully"
      
      - name: Publish to PyPI
        if: github.event_name == 'release'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload dist/*
      
      - name: Post-deployment validation
        run: |
          sleep 60  # Wait for deployment to stabilize
          
          # Comprehensive health checks
          curl -f https://holo-code-gen.com/health
          curl -f https://holo-code-gen.com/health/ready
          
          # Test critical functionality
          python scripts/production_validation.py
      
      - name: Update monitoring dashboards
        run: |
          # Update Grafana dashboards with new version
          python scripts/update_monitoring_dashboards.py \
            --version=${{ needs.build.outputs.version }}
      
      - name: Create deployment record
        run: |
          # Record deployment in tracking system
          cat > deployment-record.json << EOF
          {
            "version": "${{ needs.build.outputs.version }}",
            "commit": "${{ github.sha }}",
            "environment": "production",
            "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployed_by": "${{ github.actor }}",
            "image": "${{ needs.build.outputs.image-tag }}"
          }
          EOF
      
      - name: Upload deployment record
        uses: actions/upload-artifact@v3
        with:
          name: deployment-record
          path: deployment-record.json

  # Job 6: Post-Deployment Monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: Monitor deployment health
        run: |
          echo "📊 Starting post-deployment monitoring"
          
          # Monitor for 10 minutes
          for i in {1..20}; do
            echo "Health check $i/20"
            
            # Check application health
            if ! curl -f https://holo-code-gen.com/health; then
              echo "❌ Health check failed at attempt $i"
              exit 1
            fi
            
            # Check error rates
            # (This would typically query your monitoring system)
            
            sleep 30
          done
          
          echo "✅ Post-deployment monitoring completed successfully"
      
      - name: Performance monitoring
        run: |
          # Monitor key performance metrics
          python scripts/monitor_performance.py --duration=600  # 10 minutes
      
      - name: Send deployment notification
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Monitoring: All systems nominal"
          # Add Slack/Teams notification here

  # Job 7: Rollback (on failure)
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment]
    if: failure() && needs.deploy-production.result == 'success'
    environment:
      name: production-rollback
    
    steps:
      - name: Rollback deployment
        run: |
          echo "🚨 Initiating emergency rollback"
          
          # Get previous successful deployment
          # kubectl rollout undo deployment/holo-code-gen
          
          # Verify rollback
          # kubectl rollout status deployment/holo-code-gen
          
          echo "🔄 Rollback completed"
      
      - name: Verify rollback health
        run: |
          sleep 60
          curl -f https://holo-code-gen.com/health
          echo "✅ Rollback verification passed"
      
      - name: Notify rollback
        run: |
          echo "⚠️ Production rollback completed due to deployment issues"
          # Send urgent notification

  # Job 8: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment]
    if: always()
    
    steps:
      - name: Clean up old images
        run: |
          echo "🧹 Cleaning up old container images"
          # Keep last 5 versions, remove older ones
          # This would typically use your container registry API
      
      - name: Archive deployment artifacts
        run: |
          echo "📦 Archiving deployment artifacts"
          # Move artifacts to long-term storage
      
      - name: Update deployment status
        run: |
          echo "📝 Updating deployment status dashboard"
          # Update internal deployment tracking