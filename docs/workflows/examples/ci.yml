# CI/CD Workflow for Holo-Code-Gen
# Place this file in .github/workflows/ci.yml

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # Job 1: Code Quality and Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Code formatting check
        run: |
          black --check --diff .
          
      - name: Linting
        run: |
          ruff check .
          
      - name: Type checking
        run: |
          mypy holo_code_gen
          
      - name: Security scanning
        run: |
          bandit -r holo_code_gen/ -f json -o bandit-report.json
          safety check --json --output safety-report.json
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Job 2: Testing Matrix
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for efficiency
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.9"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenblas-dev liblapack-dev libfftw3-dev
      
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openblas lapack fftw
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=holo_code_gen --cov-report=xml --cov-report=term
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # Job 3: Photonic-Specific Tests
  photonic-tests:
    name: Photonic Component Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies with simulation support
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[simulation,dev]"
      
      - name: Test photonic component loading
        run: |
          pytest tests/photonic/ -v -m "not slow"
      
      - name: Test template library integrity
        run: |
          python -c "from holo_code_gen.templates import IMECLibrary; IMECLibrary.verify_integrity()"
      
      - name: Test GDS generation
        run: |
          pytest tests/test_gds_generation.py -v
      
      - name: Validate example circuits
        run: |
          python examples/basic_example.py --validate-only
          python examples/spiking_network.py --validate-only

  # Job 4: Performance Tests
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[simulation,dev]"
      
      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ -v --benchmark-json=benchmark.json
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark.json
      
      - name: Check performance regression
        run: |
          python scripts/check_performance_regression.py benchmark.json

  # Job 5: Documentation Build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install sphinx sphinx-rtd-theme myst-parser
      
      - name: Build documentation
        run: |
          sphinx-build -b html docs/ docs/_build/html -W --keep-going
      
      - name: Check documentation links
        run: |
          sphinx-build -b linkcheck docs/ docs/_build/linkcheck
      
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html

  # Job 6: Container Build and Test
  container:
    name: Container Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runtime
          tags: holo-code-gen:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test container health
        run: |
          docker run -d --name holo-test holo-code-gen:test
          sleep 30
          docker exec holo-test python -c "import holo_code_gen; print('Container test passed')"
          docker stop holo-test
      
      - name: Container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'holo-code-gen:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 7: Integration with External Services
  integration:
    name: External Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test]
    if: github.event_name == 'push'
    
    services:
      prometheus:
        image: prom/prometheus:latest
        ports:
          - 9090:9090
      
      grafana:
        image: grafana/grafana:latest
        ports:
          - 3000:3000
        env:
          GF_SECURITY_ADMIN_PASSWORD: admin
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Test monitoring integration
        run: |
          python tests/integration/test_monitoring.py
      
      - name: Test metrics collection
        run: |
          python -c "
          import requests
          import time
          
          # Start app in background
          import subprocess
          proc = subprocess.Popen(['python', '-m', 'holo_code_gen.server'])
          time.sleep(10)
          
          # Test metrics endpoint
          response = requests.get('http://localhost:8000/metrics')
          assert response.status_code == 200
          assert 'holo_code_gen' in response.text
          
          proc.terminate()
          "

  # Job 8: Deployment Readiness
  deploy-ready:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, photonic-tests, docs, container]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check deployment readiness
        run: |
          echo "✅ All CI checks passed"
          echo "✅ Tests completed successfully"
          echo "✅ Documentation built"
          echo "✅ Container image validated"
          echo "🚀 Ready for deployment"
      
      - name: Create deployment artifact
        run: |
          echo "COMMIT_SHA=${GITHUB_SHA}" > deployment.env
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment.env
          echo "BRANCH=${GITHUB_REF_NAME}" >> deployment.env
      
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-info
          path: deployment.env

  # Notification job (runs on completion)
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality, test, photonic-tests, docs, container]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' }}
        run: |
          echo "🎉 CI pipeline completed successfully!"
          # Add Slack/Discord notification here if needed
      
      - name: Notify on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ CI pipeline failed. Check the logs for details."
          # Add failure notification here if needed